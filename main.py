import os
import logging
import random
import psycopg2
from aiogram import Bot, Dispatcher, executor, types
from psycopg2 import OperationalError

# ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('SOULS_BOT')

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')  # –ü–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ @userinfobot
POSTGRES_URL = "postgresql://soulsbase_user:7mUrpaI5iLfNRmGlK2QMiMhf8swRgZob@dpg-cvjdpqhr0fns73fvebvg-a/soulsbase"

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==================
bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
def init_db():
    try:
        conn = psycopg2.connect(POSTGRES_URL)
        conn.autocommit = True
        with conn.cursor() as cur:
            # –ò–≥—Ä–æ–∫–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS players (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    level INT DEFAULT 1,
                    hp INT DEFAULT 100,
                    max_hp INT DEFAULT 100,
                    exp INT DEFAULT 0,
                    gold INT DEFAULT 50,
                    score INT DEFAULT 0,
                    weapon TEXT DEFAULT '–ö–∏–Ω–∂–∞–ª',
                    location TEXT DEFAULT '–•–∞–±',
                    inventory JSONB DEFAULT '[]'
                )
            """)
            
            # –õ–æ–∫–∞—Ü–∏–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS locations (
                    name TEXT PRIMARY KEY,
                    description TEXT,
                    required_level INT DEFAULT 1,
                    enemies JSONB DEFAULT '[]'
                )
            """)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
            cur.execute("""
                INSERT INTO locations (name, description, enemies)
                VALUES 
                    ('–•–∞–±', '–ú–µ—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞', '[]'),
                    ('–¢–µ–º–Ω—ã–π –ª–µ—Å', '–ì—É—Å—Ç–æ–π –ª–µ—Å —Å –æ–ø–∞—Å–Ω—ã–º–∏ —Ç–≤–∞—Ä—è–º–∏', '["–°–∫–µ–ª–µ—Ç", "–õ–µ—Å–Ω–æ–π –≤–æ–ª–∫"]')
                ON CONFLICT DO NOTHING
            """)
            
        logger.info("–ë–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except OperationalError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

# ================== –ò–ì–†–û–í–´–ï –î–ê–ù–ù–´–ï ====================
WEAPONS = {
    "–ö–∏–Ω–∂–∞–ª": {"damage": 10, "type": "–û—Å—Ç—Ä—ã–µ"},
    "–¢–æ–ø–æ—Ä": {"damage": 15, "type": "–î—Ä–æ–±—è—â–∏–µ"}
}

ENEMIES = {
    "–°–∫–µ–ª–µ—Ç": {"hp": 80, "attack": 15, "weakness": "–î—Ä–æ–±—è—â–∏–µ", "exp": 20},
    "–õ–µ—Å–Ω–æ–π –≤–æ–ª–∫": {"hp": 120, "attack": 20, "weakness": "–û—Å—Ç—Ä—ã–µ", "exp": 30}
}

# ================== –°–ò–°–¢–ï–ú–ê –ë–û–Ø ====================
async def handle_battle(user_id: int, enemy_name: str):
    try:
        conn = psycopg2.connect(POSTGRES_URL)
        conn.autocommit = True
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            cur.execute("""
                SELECT hp, weapon, level, exp 
                FROM players 
                WHERE user_id = %s
            """, (user_id,))
            player = cur.fetchone()
            
            if not player:
                return "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start"
            
            player_hp, weapon, level, exp = player
            enemy = ENEMIES[enemy_name]
            weapon_damage = WEAPONS.get(weapon, {"damage": 10})["damage"]
            
            # –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–ª–∞–±–æ—Å—Ç–µ–π
            if WEAPONS[weapon]["type"] == enemy["weakness"]:
                damage = weapon_damage * 2
            else:
                damage = weapon_damage
                
            enemy_hp = enemy["hp"] - damage
            player_new_hp = player_hp - enemy["attack"]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if enemy_hp <= 0:
                new_exp = exp + enemy["exp"]
                new_gold = enemy["hp"] // 2
                cur.execute("""
                    UPDATE players 
                    SET 
                        hp = CASE WHEN hp > 0 THEN hp ELSE 100 END,
                        exp = %s,
                        gold = gold + %s,
                        score = score + %s
                    WHERE user_id = %s
                """, (new_exp, new_gold, damage, user_id))
                return f"üéâ –ü–æ–±–µ–¥–∞! +{enemy['exp']} –æ–ø—ã—Ç–∞, +{new_gold} –∑–æ–ª–æ—Ç–∞"
                
            elif player_new_hp <= 0:
                cur.execute("""
                    UPDATE players 
                    SET hp = 100, location = '–•–∞–±' 
                    WHERE user_id = %s
                """, (user_id,))
                return "‚ò†Ô∏è –í—ã –ø–æ–≥–∏–±–ª–∏! –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –≤ –•–∞–±–µ."
                
            else:
                cur.execute("""
                    UPDATE players 
                    SET hp = %s 
                    WHERE user_id = %s
                """, (player_new_hp, user_id))
                return f"‚öîÔ∏è –í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage} —É—Ä–æ–Ω–∞! –í–∞—à–µ HP: {player_new_hp}"
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–æ—è: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

# ================== –ö–û–ú–ê–ù–î–´ ====================
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    try:
        conn = psycopg2.connect(POSTGRES_URL)
        conn.autocommit = True
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO players (user_id, username)
                VALUES (%s, %s)
                ON CONFLICT DO NOTHING
            """, (message.from_user.id, message.from_user.username))
            
            await message.answer(
                "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dark Souls –±–æ—Ç!\n"
                "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/status - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
                "/explore - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é\n"
                "/upgrade - –ø—Ä–æ–∫–∞—á–∫–∞\n"
                "/top - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

@dp.message_handler(commands=['status'])
async def cmd_status(message: types.Message):
    try:
        conn = psycopg2.connect(POSTGRES_URL)
        with conn.cursor() as cur:
            cur.execute("""
                SELECT level, hp, exp, gold, score, weapon, location 
                FROM players 
                WHERE user_id = %s
            """, (message.from_user.id,))
            data = cur.fetchone()
            
            if not data:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ /start")
                return
                
            level, hp, exp, gold, score, weapon, location = data
            await message.answer(
                f"üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
                f"‚ù§Ô∏è HP: {hp}/100\n"
                f"‚ú® –û–ø—ã—Ç: {exp}/100\n"
                f"üí∞ –ó–æ–ª–æ—Ç–æ: {gold}\n"
                f"üèÜ –û—á–∫–∏: {score}\n"
                f"‚öîÔ∏è –û—Ä—É–∂–∏–µ: {weapon}\n"
                f"üìç –õ–æ–∫–∞—Ü–∏—è: {location}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

@dp.message_handler(commands=['explore'])
async def cmd_explore(message: types.Message):
    try:
        conn = psycopg2.connect(POSTGRES_URL)
        with conn.cursor() as cur:
            cur.execute("""
                SELECT location, level 
                FROM players 
                WHERE user_id = %s
            """, (message.from_user.id,))
            location, level = cur.fetchone()
            
            cur.execute("""
                SELECT enemies 
                FROM locations 
                WHERE name = %s AND required_level <= %s
            """, (location, level))
            
            if enemies := cur.fetchone()[0]:
                enemy = random.choice(enemies)
                await message.answer(
                    f"üåë –í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ {enemy}!\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=types.InlineKeyboardMarkup().row(
                        types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"fight_{enemy}"),
                        types.InlineKeyboardButton("–£–±–µ–∂–∞—Ç—å", callback_data="run_away")
                    )
                )
            else:
                await message.answer("–ó–¥–µ—Å—å –Ω–µ—á–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith('fight_'))
async def process_fight(callback: types.CallbackQuery):
    enemy = callback.data.split('_')[1]
    result = await handle_battle(callback.from_user.id, enemy)
    await callback.message.edit_text(result)

# ================== –ó–ê–ü–£–°–ö ====================
async def on_startup(dp):
    if not init_db():
        exit(1)
        
    if ADMIN_ID:
        await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    logger.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")

if __name__ == '__main__':
    executor.start_polling(
        dp,
        skip_updates=True,
        on_startup=on_startup,
        timeout=300
)
