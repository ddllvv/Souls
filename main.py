import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import psycopg2
from psycopg2 import OperationalError

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ---
def get_db():
    try:
        return psycopg2.connect(os.getenv("DATABASE_URL"))
    except OperationalError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ ---
async def is_player_exists(user_id: int) -> bool:
    conn = get_db()
    if not conn:
        return False
        
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT 1 FROM players WHERE user_id = %s", (user_id,))
            return cur.fetchone() is not None
    finally:
        conn.close()

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ ---
async def register_player(user_id: int, username: str):
    conn = get_db()
    if not conn:
        return False
        
    try:
        with conn.cursor() as cur:
            cur.execute(
                "INSERT INTO players (user_id, username, current_location) "
                "VALUES (%s, %s, '–•–∞–±')",
                (user_id, username)
            )
            conn.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False
    finally:
        conn.close()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
    
    if await is_player_exists(user_id):
        await message.answer("üîÆ –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /explore")
    else:
        if await register_player(user_id, username):
            await message.answer(
                "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dark Souls –±–æ—Ç!\n\n"
                "üõ°Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/explore - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é\n"
                "/status - –≤–∞—à —Å—Ç–∞—Ç—É—Å\n"
                "/inventory - –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"
            )
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ö–æ–º–∞–Ω–¥–∞ /explore ---
@dp.message_handler(commands=['explore'])
async def cmd_explore(message: types.Message):
    if not await is_player_exists(message.from_user.id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–ò–¥—Ç–∏ –≤–ø–µ—Ä–µ–¥", callback_data="move_forward"),
        types.InlineKeyboardButton("–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è", callback_data="look_around")
    )
    
    await message.answer(
        "üåë –í—ã —Å—Ç–æ–∏—Ç–µ –≤ –º—Ä–∞—á–Ω–æ–º –∫–æ—Ä–∏–¥–æ—Ä–µ. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboard
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@dp.callback_query_handler(lambda c: c.data.startswith('move_'))
async def process_move(callback: types.CallbackQuery):
    action = callback.data.split('_')[1]
    
    if action == "forward":
        await callback.message.edit_text(
            "–í—ã –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç–µ—Å—å –≤–ø–µ—Ä–µ–¥...\n"
            "–í–Ω–µ–∑–∞–ø–Ω–æ –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –°–∫–µ–ª–µ—Ç!",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="fight_skeleton"),
                types.InlineKeyboardButton("–ë–µ–∂–∞—Ç—å", callback_data="run_away")
            )
        )
    await callback.answer()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def on_startup(dp):
    await bot.send_message(os.getenv("ADMIN_ID"), "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logger.info("Bot started")

if __name__ == '__main__':
    executor.start_polling(
        dp,
        skip_updates=True,
        on_startup=on_startup,
        timeout=60,
        relax=0.1
)
