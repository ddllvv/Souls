import os
import logging
import psycopg2
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from psycopg2 import OperationalError
from psycopg2.extras import DictCursor

# ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('DARK_SOULS_BOT')

BOT_TOKEN = os.getenv('BOT_TOKEN')
POSTGRES_URL = "postgresql://soulsbase_user:7mUrpaI5iLfNRmGlK2QMiMhf8swRgZob@dpg-cvjdpqhr0fns73fvebvg-a/soulsbase"

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==================
bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
class Database:
    def __init__(self):
        self.conn = None
        self.connect()
        self.init_db()

    def connect(self):
        try:
            self.conn = psycopg2.connect(POSTGRES_URL)
            self.conn.autocommit = True
        except OperationalError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

    def init_db(self):
        with self.conn.cursor() as cur:
            # –ò–≥—Ä–æ–∫–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS players (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    level INT DEFAULT 1,
                    hp INT DEFAULT 100,
                    max_hp INT DEFAULT 100,
                    stamina INT DEFAULT 50,
                    gold INT DEFAULT 50,
                    weapon TEXT DEFAULT '–ö–∏–Ω–∂–∞–ª',
                    armor TEXT DEFAULT '–¢—Ä—è–ø—å–µ',
                    location TEXT DEFAULT '–•–∞–±',
                    inventory JSONB DEFAULT '[]'
                )
            """)
            
            # –õ–æ–∫–∞—Ü–∏–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS locations (
                    name TEXT PRIMARY KEY,
                    description TEXT,
                    required_level INT DEFAULT 1,
                    enemies JSONB DEFAULT '[]',
                    shop JSONB DEFAULT '[]'
                )
            """)
            
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            cur.execute("""
                CREATE TABLE IF NOT EXISTS bot_lock (
                    lock_id INT PRIMARY KEY DEFAULT 1,
                    pid INT NOT NULL
                )
            """)

    def execute(self, query, params=None):
        try:
            with self.conn.cursor(cursor_factory=DictCursor) as cur:
                cur.execute(query, params or ())
                return cur
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self.connect()
            return None

db = Database()

# ================ –ò–ì–†–û–í–´–ï –ú–ï–•–ê–ù–ò–ö–ò ================
class Game:
    # –õ–æ–∫–∞—Ü–∏–∏
    LOCATIONS = {
        "–•–∞–±": {
            "description": "–ú–µ—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞. –ó–¥–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ.",
            "enemies": [],
            "shop": ["–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è:50", "–†–µ–º. –Ω–∞–±–æ—Ä:30"]
        },
        "–¢–µ–º–Ω—ã–π –ª–µ—Å": {
            "description": "–ì—É—Å—Ç–æ–π –ª–µ—Å, –ø–æ–ª–Ω—ã–π –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π.",
            "required_level": 2,
            "enemies": ["–°–∫–µ–ª–µ—Ç", "–õ–µ—Å–Ω–æ–π –≤–æ–ª–∫"],
            "shop": ["–Ø–¥:20", "–§–∞–∫–µ–ª:40"]
        }
    }

    # –í—Ä–∞–≥–∏
    ENEMIES = {
        "–°–∫–µ–ª–µ—Ç": {"hp": 80, "attack": 15, "weakness": "–î—Ä–æ–±—è—â–µ–µ"},
        "–õ–µ—Å–Ω–æ–π –≤–æ–ª–∫": {"hp": 120, "attack": 20, "weakness": "–û—Å—Ç—Ä—ã–µ"}
    }

    # –û—Ä—É–∂–∏–µ
    WEAPONS = {
        "–ö–∏–Ω–∂–∞–ª": {"type": "–û—Å—Ç—Ä—ã–µ", "damage": 10},
        "–î—É–±–∏–Ω–∞": {"type": "–î—Ä–æ–±—è—â–µ–µ", "damage": 15}
    }

# ==================== –ö–û–ú–ê–ù–î–´ =====================
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user = db.execute("SELECT * FROM players WHERE user_id = %s", (message.from_user.id,))
    if user.fetchone():
        await message.answer("üîÆ –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status")
        return
    
    db.execute(
        "INSERT INTO players (user_id, username) VALUES (%s, %s)",
        (message.from_user.id, message.from_user.username)
    )
    
    await message.answer(
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dark Souls –±–æ—Ç!\n\n"
        "üõ°Ô∏è –í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: 100/100\n"
        "üí™ –£—Ä–æ–≤–µ–Ω—å: 1\n"
        "üí∞ –ó–æ–ª–æ—Ç–æ: 50\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/explore - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é\n"
        "/inventory - –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
        "/shop - –º–∞–≥–∞–∑–∏–Ω"
    )

@dp.message_handler(commands=['status'])
async def cmd_status(message: types.Message):
    player = db.execute(
        "SELECT * FROM players WHERE user_id = %s", 
        (message.from_user.id,)
    ).fetchone()
    
    if not player:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    await message.answer(
        f"üìä [–£—Ä–æ–≤–µ–Ω—å {player['level']}]\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player['hp']}/{player['max_hp']}\n"
        f"üí∞ –ó–æ–ª–æ—Ç–æ: {player['gold']}\n"
        f"‚öîÔ∏è –û—Ä—É–∂–∏–µ: {player['weapon']}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {player['location']}"
    )

@dp.message_handler(commands=['explore'])
async def cmd_explore(message: types.Message):
    player = db.execute(
        "SELECT * FROM players WHERE user_id = %s", 
        (message.from_user.id,)
    ).fetchone()
    
    if not player:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    location = Game.LOCATIONS.get(player['location'], {})
    enemies = location.get('enemies', [])
    
    if not enemies:
        await message.answer("–ó–¥–µ—Å—å –Ω–µ—á–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å.")
        return
    
    enemy = random.choice(enemies)
    enemy_stats = Game.ENEMIES[enemy]
    
    await message.answer(
        f"üíÄ –í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ {enemy}!\n"
        f"‚ù§Ô∏è HP: {enemy_stats['hp']}\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {enemy_stats['attack']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"fight_{enemy}"),
            types.InlineKeyboardButton("–£–±–µ–∂–∞—Ç—å", callback_data="run_away")
        )
    )

@dp.callback_query_handler(lambda c: c.data.startswith('fight_'))
async def process_fight(callback: types.CallbackQuery):
    enemy = callback.data.split('_')[1]
    enemy_stats = Game.ENEMIES[enemy]
    
    player = db.execute(
        "SELECT * FROM players WHERE user_id = %s", 
        (callback.from_user.id,)
    ).fetchone()
    
    weapon = Game.WEAPONS[player['weapon']]
    damage = weapon['damage']
    
    if weapon['type'] == enemy_stats['weakness']:
        damage *= 2
    
    new_enemy_hp = enemy_stats['hp'] - damage
    new_player_hp = player['hp'] - enemy_stats['attack']
    
    if new_enemy_hp <= 0:
        db.execute(
            "UPDATE players SET gold = gold + %s WHERE user_id = %s",
            (enemy_stats['hp'] // 2, callback.from_user.id)
        )
        await callback.message.edit_text(
            f"üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {enemy}!\n"
            f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ –∑–æ–ª–æ—Ç–∞: {enemy_stats['hp'] // 2}"
        )
    elif new_player_hp <= 0:
        db.execute(
            "UPDATE players SET hp = max_hp, location = '–•–∞–±' WHERE user_id = %s",
            (callback.from_user.id,)
        )
        await callback.message.edit_text("‚ò†Ô∏è –í—ã –ø–æ–≥–∏–±–ª–∏! –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –≤ –•–∞–±–µ.")
    else:
        db.execute(
            "UPDATE players SET hp = %s WHERE user_id = %s",
            (new_player_hp, callback.from_user.id)
        )
        await callback.message.edit_text(
            f"‚öîÔ∏è –í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage} —É—Ä–æ–Ω–∞!\n"
            f"üí¢ –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç! –í–∞—à–µ HP: {new_player_hp}"
        )

# ==================== –ó–ê–ü–£–°–ö ======================
def kill_other_instances():
    db.execute("DELETE FROM bot_lock")
    db.execute("INSERT INTO bot_lock (lock_id, pid) VALUES (1, %s)", (os.getpid(),))

if __name__ == '__main__':
    kill_other_instances()
    executor.start_polling(
        dp,
        skip_updates=True,
        timeout=300,
        on_startup=lambda _: logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        )
