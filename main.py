import os
import logging
import random
import psycopg2
from aiogram import Bot, Dispatcher, executor, types
from psycopg2 import OperationalError

# ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('SOULS_BOT')

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')
POSTGRES_URL = "postgresql://soulsbase_user:7mUrpaI5iLfNRmGlK2QMiMhf8swRgZob@dpg-cvjdpqhr0fns73fvebvg-a/soulsbase"

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==================
bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
def init_db():
    try:
        conn = psycopg2.connect(POSTGRES_URL)
        conn.autocommit = True
        with conn.cursor() as cur:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            cur.execute("DROP TABLE IF EXISTS bot_lock")
            cur.execute("""
                CREATE TABLE bot_lock (
                    pid INT PRIMARY KEY
                )
            """)
            cur.execute("INSERT INTO bot_lock (pid) VALUES (%s)", (os.getpid(),))
            
            # –ò–≥—Ä–æ–∫–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS players (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    level INT DEFAULT 1,
                    hp INT DEFAULT 100,
                    max_hp INT DEFAULT 100,
                    exp INT DEFAULT 0,
                    gold INT DEFAULT 50,
                    score INT DEFAULT 0,
                    weapon TEXT DEFAULT '–ö–∏–Ω–∂–∞–ª',
                    location TEXT DEFAULT '–•–∞–±',
                    inventory JSONB DEFAULT '[]'
                )
            """)
            
            # –õ–æ–∫–∞—Ü–∏–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS locations (
                    name TEXT PRIMARY KEY,
                    description TEXT,
                    events JSONB DEFAULT '[]',
                    required_level INT DEFAULT 1
                )
            """)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
            locations_data = [
                ("–•–∞–±", "–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–æ–Ω–∞", ["trader", "rest", "trainer"], 1),
                ("–¢–µ–º–Ω—ã–π –ª–µ—Å", "–ì—É—Å—Ç–æ–π –ª–µ—Å —Å –¥—Ä–µ–≤–Ω–∏–º–∏ –¥—É—Ö–∞–º–∏", ["fight", "treasure", "trap"], 2),
                ("–õ–∞–±–∏—Ä–∏–Ω—Ç –ú–∏–Ω–æ—Ç–∞–≤—Ä–∞", "–ö–∞–º–µ–Ω–Ω—ã–µ —Å—Ç–µ–Ω—ã —Å –∫—Ä–æ–≤–∞–≤—ã–º–∏ –Ω–∞–¥–ø–∏—Å—è–º–∏", ["boss", "puzzle", "trap"], 5),
                ("–í—É–ª–∫–∞–Ω –ê—à–≥–∞—Ä–¥", "–†–∞—Å–∫–∞–ª–µ–Ω–Ω–∞—è –ª–∞–≤–∞ –∏ –¥—ã–º", ["fight", "event", "boss"], 7),
                ("–•—Ä–∞–º –ó–∞–±—ã—Ç—ã—Ö", "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –∞–ª—Ç–∞—Ä—å —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏", ["puzzle", "treasure", "curse"], 3),
                ("–õ–µ–¥—è–Ω—ã–µ –ø–µ—â–µ—Ä—ã", "–í–µ—á–Ω–∞—è –º–µ—Ä–∑–ª–æ—Ç–∞ –∏ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", ["fight", "treasure", "trap"], 4),
                ("–ö–ª–∞–¥–±–∏—â–µ –î—Ä–∞–∫–æ–Ω–æ–≤", "–ö–æ—Å—Ç–∏ –¥—Ä–µ–≤–Ω–∏—Ö —Å—É—â–µ—Å—Ç–≤", ["boss", "event", "curse"], 6),
                ("–ë–∞—à–Ω—è –ú–∞–≥–æ–≤", "–ü–∞—Ä—è—â–∏–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –ª–æ–≤—É—à–∫–∏", ["puzzle", "fight", "treasure"], 8),
                ("–î–∂—É–Ω–≥–ª–∏ –®–∏–≤–∞–Ω—ã", "–Ø–¥–æ–≤–∏—Ç—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ —Å–∫—Ä—ã—Ç—ã–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏", ["trap", "fight", "event"], 3),
                ("–ü–æ–¥–∑–µ–º–µ–ª—å—è –ì–Ω–æ–º–æ–≤", "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–µ —à–∞—Ö—Ç—ã —Å –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏", ["puzzle", "treasure", "trap"], 4),
                ("–û–∑–µ—Ä–æ –ü—Ä–æ–∫–ª—è—Ç—ã—Ö", "–¢—É–º–∞–Ω–Ω–∞—è –≤–æ–¥–∞ —Å –ø—Ä–∏–∑—Ä–∞–∫–∞–º–∏", ["curse", "boss", "event"], 5),
                ("–ü—É—Å—Ç—ã–Ω—è –ë–µ–∑—É–º–∏—è", "–ü–∞–ª—è—â–µ–µ —Å–æ–ª–Ω—Ü–µ –∏ –º–∏—Ä–∞–∂—ã", ["trap", "fight", "treasure"], 6),
                ("–ß–µ—Ä—Ç–æ–≥–∏ –•–∞–æ—Å–∞", "–ò—Å–∫–∞–∂–µ–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –¥–µ–º–æ–Ω—ã", ["boss", "fight", "event"], 9),
                ("–°–∞–¥—ã –≠–ª–∏–∑–∏—É–º–∞", "–¶–≤–µ—Ç—É—â–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ —Å–∫—Ä—ã—Ç—ã–µ –ª–æ–≤—É—à–∫–∏", ["treasure", "puzzle", "trap"], 2),
                ("–¶–∏—Ç–∞–¥–µ–ª—å –¢—å–º—ã", "–ö—Ä–µ–ø–æ—Å—Ç—å –ø–æ–≤–µ–ª–∏—Ç–µ–ª—è –¥–µ–º–æ–Ω–æ–≤", ["boss", "fight", "curse"], 10),
                ("–û—Å—Ç—Ä–æ–≤ –†—É–∏–Ω", "–†–∞–∑–≤–∞–ª–∏–Ω—ã –¥—Ä–µ–≤–Ω–µ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏", ["puzzle", "treasure", "trap"], 4),
                ("–ê–±–∏—Å—Å–∞–ª—å—Å–∫–∏–µ –ì–ª—É–±–∏–Ω—ã", "–ü–æ–¥–≤–æ–¥–Ω—ã–π –º–∏—Ä —Å —á—É–¥–æ–≤–∏—â–∞–º–∏", ["boss", "fight", "event"], 8),
                ("–ù–µ–±–µ—Å–Ω—ã–π –ê—Ä—Ö–∏–ø–µ–ª–∞–≥", "–ü–∞—Ä—è—â–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ —Å —Ö—Ä–∞–Ω–∏—Ç–µ–ª—è–º–∏", ["puzzle", "treasure", "boss"], 7)
            ]
            
            cur.executemany("""
                INSERT INTO locations (name, description, events, required_level)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT DO NOTHING
            """, [(name, desc, events, lvl) for name, desc, events, lvl in locations_data])
            
        logger.info("–ë–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except OperationalError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

# ================== –ò–ì–†–û–í–´–ï –î–ê–ù–ù–´–ï ====================
WEAPONS = {
    "–ö–∏–Ω–∂–∞–ª": {"damage": 10, "type": "–û–±—ã—á–Ω—ã–π"},
    "–ú–µ—á –ü–ª–∞–º–µ–Ω–∏": {"damage": 20, "type": "–û–≥–æ–Ω—å"},
    "–õ–µ–¥—è–Ω–æ–π –ü–æ—Å–æ—Ö": {"damage": 18, "type": "–õ–µ–¥"},
    "–ú–æ–ª–æ—Ç –ì—Ä–æ–º–∞": {"damage": 25, "type": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ"}
}

ENEMIES = {
    # –û–±—ã—á–Ω—ã–µ –≤—Ä–∞–≥–∏
    "–°–∫–µ–ª–µ—Ç": {"hp": 80, "attack": 15, "gold": 20, "exp": 30, "weakness": "–î—Ä–æ–±—è—â–∏–π"},
    "–õ–µ—Å–Ω–æ–π –í–æ–ª–∫": {"hp": 120, "attack": 20, "gold": 30, "exp": 40, "weakness": "–û—Å—Ç—Ä—ã–µ"},
    "–ì–æ–±–ª–∏–Ω": {"hp": 100, "attack": 18, "gold": 25, "exp": 35, "weakness": "–û–≥–æ–Ω—å"},
    
    # –≠–ª–∏—Ç–Ω—ã–µ –≤—Ä–∞–≥–∏
    "–õ–µ–¥—è–Ω–æ–π –ì–æ–ª–µ–º": {"hp": 200, "attack": 30, "gold": 100, "exp": 80, "weakness": "–û–≥–æ–Ω—å"},
    "–û–≥–Ω–µ–Ω–Ω—ã–π –î—Ä–∞–∫–æ–Ω–∏–¥": {"hp": 250, "attack": 35, "gold": 120, "exp": 100, "weakness": "–õ–µ–¥"},
    
    # –ë–æ—Å—Å—ã
    "–ú–∏–Ω–æ—Ç–∞–≤—Ä": {"hp": 500, "attack": 50, "gold": 300, "exp": 200, "weakness": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ"},
    "–õ–∏—á": {"hp": 400, "attack": 45, "gold": 250, "exp": 180, "weakness": "–°–≤–µ—Ç"},
    "–ö—Ä–∞–∫–µ–Ω": {"hp": 600, "attack": 55, "gold": 400, "exp": 250, "weakness": "–û–≥–æ–Ω—å"}
}

EVENTS = {
    "fight": "üíÄ –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç!",
    "treasure": "üíé –í—ã –Ω–∞—à–ª–∏ —Å—É–Ω–¥—É–∫!",
    "trader": "üè™ –°—Ç—Ä–∞–Ω—Å—Ç–≤—É—é—â–∏–π —Ç–æ—Ä–≥–æ–≤–µ—Ü:",
    "trap": "‚ö†Ô∏è –õ–æ–≤—É—à–∫–∞!",
    "puzzle": "üîç –î—Ä–µ–≤–Ω–∏–π –º–µ—Ö–∞–Ω–∏–∑–º...",
    "curse": "‚ò†Ô∏è –ü—Ä–æ–∫–ª—è—Ç–∏–µ!",
    "event": "üåå –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏—Å–∫–∞–∂–∞–µ—Ç—Å—è...",
    "rest": "üõå –í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–∏–ª—ã",
    "boss": "üëπ –ë–û–°–° –õ–û–ö–ê–¶–ò–ò!",
    "trainer": "üßô –ú–∞—Å—Ç–µ—Ä-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:"
}

# ================== –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô ====================
async def handle_event(user_id: int):
    try:
        conn = psycopg2.connect(POSTGRES_URL)
        conn.autocommit = True
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            cur.execute("SELECT location, level FROM players WHERE user_id = %s", (user_id,))
            location, player_level = cur.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
            cur.execute("SELECT events, required_level FROM locations WHERE name = %s", (location,))
            location_events, required_level = cur.fetchone()
            
            if player_level < required_level:
                return "üö´ –£—Ä–æ–≤–µ–Ω—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–æ–∫ –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏!", None
            
            event_type = random.choice(location_events)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
            if event_type == "fight":
                enemies = [e for e in ENEMIES if ENEMIES[e].get("hp", 0) < 300]
                enemy = random.choice(enemies)
                return (
                    f"{EVENTS[event_type]}\n{enemy} ({ENEMIES[enemy]['hp']}‚ù§)",
                    battle_keyboard(enemy)
                )
                
            elif event_type == "boss":
                bosses = [b for b in ENEMIES if ENEMIES[b].get("hp", 0) >= 300]
                boss = random.choice(bosses)
                return (
                    f"{EVENTS[event_type]}\n{boss} ({ENEMIES[boss]['hp']}‚ù§)",
                    battle_keyboard(boss, is_boss=True)
                )
                
            elif event_type == "treasure":
                gold = random.randint(50, 200)
                cur.execute("UPDATE players SET gold = gold + %s WHERE user_id = %s", (gold, user_id))
                return f"{EVENTS[event_type]}\nüí∞ +{gold} –∑–æ–ª–æ—Ç–∞", menu_keyboard()
            
            elif event_type == "trader":
                return (
                    f"{EVENTS[event_type]}\n"
                    "1. –ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è (100g)\n"
                    "2. –ö–ª—é—á –æ—Ç —Ç–∞–π–Ω–∏–∫–∞ (200g)",
                    trader_keyboard()
                )
                
            elif event_type == "puzzle":
                return (
                    f"{EVENTS[event_type]}\n"
                    "–ù–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
                    puzzle_keyboard()
                )
                
            elif event_type == "curse":
                damage = random.randint(20, 50)
                cur.execute("UPDATE players SET hp = GREATEST(hp - %s, 0) WHERE user_id = %s", (damage, user_id))
                return f"{EVENTS[event_type]}\nüíî –ü–æ—Ç–µ—Ä—è–Ω–æ {damage} HP!", menu_keyboard()
            
            elif event_type == "rest":
                cur.execute("UPDATE players SET hp = max_hp WHERE user_id = %s", (user_id,))
                return "üõå –í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å—Ü–µ–ª–∏–ª–∏—Å—å!", menu_keyboard()
                
            return "–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ...", menu_keyboard()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞", None

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
def menu_keyboard():
    return types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å", callback_data="explore"),
        types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="status")
    )

def battle_keyboard(enemy: str, is_boss: bool = False):
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"fight_{enemy}"),
        types.InlineKeyboardButton("–°–±–µ–∂–∞—Ç—å", callback_data="menu")
    )
    if is_boss:
        kb.add(types.InlineKeyboardButton("–ò—Å–ø. –∞—Ä—Ç–µ—Ñ–∞–∫—Ç", callback_data="use_artifact"))
    return kb

def trader_keyboard():
    return types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –∑–µ–ª—å–µ", callback_data="buy_potion"),
        types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –∫–ª—é—á", callback_data="buy_key")
    )

def puzzle_keyboard():
    return types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton("1", callback_data="puzzle_1"),
        types.InlineKeyboardButton("2", callback_data="puzzle_2"),
        types.InlineKeyboardButton("3", callback_data="puzzle_3")
    )

# ================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    try:
        conn = psycopg2.connect(POSTGRES_URL)
        conn.autocommit = True
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO players (user_id, username)
                VALUES (%s, %s)
                ON CONFLICT DO NOTHING
            """, (message.from_user.id, message.from_user.username))
            
            await message.answer(
                "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dark Souls –±–æ—Ç!",
                reply_markup=menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

@dp.callback_query_handler(lambda c: c.data == 'explore')
async def process_explore(callback: types.CallbackQuery):
    text, markup = await handle_event(callback.from_user.id)
    await callback.message.edit_text(text, reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith('fight_'))
async def process_fight(callback: types.CallbackQuery):
    enemy_name = callback.data.split('_')[1]
    enemy = ENEMIES[enemy_name]
    
    try:
        conn = psycopg2.connect(POSTGRES_URL)
        conn.autocommit = True
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            cur.execute("""
                SELECT hp, weapon, gold, exp 
                FROM players 
                WHERE user_id = %s
            """, (callback.from_user.id,))
            hp, weapon, gold, exp = cur.fetchone()
            
            # –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞
            damage = WEAPONS.get(weapon, {"damage": 10})["damage"]
            if WEAPONS[weapon]["type"] == enemy["weakness"]:
                damage *= 2
                
            new_enemy_hp = enemy["hp"] - damage
            new_hp = hp - enemy["attack"]
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if new_enemy_hp <= 0:
                cur.execute("""
                    UPDATE players 
                    SET 
                        gold = gold + %s,
                        exp = exp + %s,
                        score = score + %s
                    WHERE user_id = %s
                """, (enemy["gold"], enemy["exp"], damage, callback.from_user.id))
                text = (
                    f"üéâ {enemy_name} –ø–æ–≤–µ—Ä–∂–µ–Ω!\n"
                    f"+{enemy['gold']}üí∞ +{enemy['exp']}‚ú®"
                )
                markup = menu_keyboard()
            else:
                cur.execute("UPDATE players SET hp = %s WHERE user_id = %s", (new_hp, callback.from_user.id))
                text = (
                    f"‚öîÔ∏è –í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage} —É—Ä–æ–Ω–∞!\n"
                    f"‚ù§ –í–∞—à–µ HP: {new_hp}\n"
                    f"‚ù§ {enemy_name} HP: {new_enemy_hp}"
                )
                markup = battle_keyboard(enemy_name, "boss" in enemy_name.lower())
                
            await callback.message.edit_text(text, reply_markup=markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

# ================== –ó–ê–ü–£–°–ö ====================
async def on_startup(dp):
    if not init_db():
        exit(1)
        
    if ADMIN_ID:
        try:
            await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        except:
            pass
    
    logger.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")

if __name__ == '__main__':
    executor.start_polling(
        dp,
        skip_updates=True,
        on_startup=on_startup,
        timeout=300
            )
