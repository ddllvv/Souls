import os
import logging
import random
import psycopg2
from aiogram import Bot, Dispatcher, executor, types
from psycopg2 import OperationalError

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('SOULS_BOT')

BOT_TOKEN = os.getenv('BOT_TOKEN')
POSTGRES_URL = "postgresql://soulsbase_user:7mUrpaI5iLfNRmGlK2QMiMhf8swRgZob@dpg-cvjdpqhr0fns73fvebvg-a/soulsbase"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def get_db():
    try:
        conn = psycopg2.connect(POSTGRES_URL)
        conn.autocommit = True
        return conn
    except OperationalError as e:
        logger.error(f"DB ERROR: {e}")
        return None

def init_db():
    conn = get_db()
    if not conn: return
    
    with conn.cursor() as cur:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        cur.execute("DROP TABLE IF EXISTS bot_lock")
        cur.execute("""
            CREATE TABLE bot_lock (
                pid INT PRIMARY KEY
            )
        """)
        cur.execute("INSERT INTO bot_lock (pid) VALUES (%s)", (os.getpid(),))
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤
        cur.execute("""
            CREATE TABLE IF NOT EXISTS players (
                user_id BIGINT PRIMARY KEY,
                username TEXT,
                hp INT DEFAULT 100,
                gold INT DEFAULT 50,
                weapon TEXT DEFAULT '–ö–∏–Ω–∂–∞–ª',
                location TEXT DEFAULT '–•–∞–±'
            )
        """)
    logger.info("–ë–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# --- –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ---
ENEMIES = {
    "–°–∫–µ–ª–µ—Ç": {"hp": 80, "attack": 15},
    "–í–æ–ª–∫": {"hp": 120, "attack": 20}
}

WEAPONS = {
    "–ö–∏–Ω–∂–∞–ª": 10,
    "–ú–µ—á": 15,
    "–¢–æ–ø–æ—Ä": 20
}

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    conn = get_db()
    if not conn: return
    
    with conn.cursor() as cur:
        cur.execute("SELECT 1 FROM players WHERE user_id = %s", (message.from_user.id,))
        if cur.fetchone():
            await message.answer("üó° –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status")
            return
        
        cur.execute("""
            INSERT INTO players (user_id, username)
            VALUES (%s, %s)
        """, (message.from_user.id, message.from_user.username))
        
        await message.answer(
            "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dark Souls –±–æ—Ç!\n"
            "‚ù§Ô∏è HP: 100 | üí∞ –ó–æ–ª–æ—Ç–æ: 50\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/status - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/explore - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é\n"
            "/shop - –º–∞–≥–∞–∑–∏–Ω"
        )

@dp.message_handler(commands=['status'])
async def cmd_status(message: types.Message):
    conn = get_db()
    if not conn: return
    
    with conn.cursor() as cur:
        cur.execute("SELECT * FROM players WHERE user_id = %s", (message.from_user.id,))
        player = cur.fetchone()
        
        if not player:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        
        await message.answer(
            f"üìä –°—Ç–∞—Ç—É—Å:\n"
            f"‚ù§Ô∏è HP: {player[2]}/100\n"
            f"üí∞ –ó–æ–ª–æ—Ç–æ: {player[3]}\n"
            f"‚öîÔ∏è –û—Ä—É–∂–∏–µ: {player[4]}\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {player[5]}"
        )

@dp.message_handler(commands=['explore'])
async def cmd_explore(message: types.Message):
    conn = get_db()
    if not conn: return
    
    with conn.cursor() as cur:
        cur.execute("SELECT location FROM players WHERE user_id = %s", (message.from_user.id,))
        location = cur.fetchone()[0]
        
        enemy = random.choice(list(ENEMIES.keys()))
        enemy_hp = ENEMIES[enemy]["hp"]
        enemy_attack = ENEMIES[enemy]["attack"]
        
        await message.answer(
            f"üåë –í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ {enemy}!\n"
            f"‚ù§Ô∏è HP –≤—Ä–∞–≥–∞: {enemy_hp}\n"
            f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {enemy_attack}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=types.InlineKeyboardMarkup().row(
                types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"fight_{enemy}"),
                types.InlineKeyboardButton("–£–±–µ–∂–∞—Ç—å", callback_data="run_away")
            )
        )

@dp.callback_query_handler(lambda c: c.data.startswith('fight_'))
async def process_fight(callback: types.CallbackQuery):
    enemy = callback.data.split('_')[1]
    enemy_stats = ENEMIES[enemy]
    
    conn = get_db()
    if not conn: return
    
    with conn.cursor() as cur:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        cur.execute("SELECT hp, weapon FROM players WHERE user_id = %s", (callback.from_user.id,))
        player_hp, weapon = cur.fetchone()
        
        # –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞
        damage = WEAPONS.get(weapon, 10)
        new_enemy_hp = enemy_stats["hp"] - damage
        new_player_hp = player_hp - enemy_stats["attack"]
        
        if new_enemy_hp <= 0:
            cur.execute("""
                UPDATE players 
                SET gold = gold + %s 
                WHERE user_id = %s
            """, (enemy_stats["hp"], callback.from_user.id))
            await callback.message.edit_text(f"üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {enemy}! +{enemy_stats['hp']} –∑–æ–ª–æ—Ç–∞")
        elif new_player_hp <= 0:
            cur.execute("""
                UPDATE players 
                SET hp = 100, location = '–•–∞–±' 
                WHERE user_id = %s
            """, (callback.from_user.id,))
            await callback.message.edit_text("‚ò†Ô∏è –í—ã –ø–æ–≥–∏–±–ª–∏! –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –≤ –•–∞–±–µ.")
        else:
            cur.execute("""
                UPDATE players 
                SET hp = %s 
                WHERE user_id = %s
            """, (new_player_hp, callback.from_user.id))
            await callback.message.edit_text(
                f"‚öîÔ∏è –í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage} —É—Ä–æ–Ω–∞!\n"
                f"üí¢ –í–∞—Å –∞—Ç–∞–∫–æ–≤–∞–ª–∏! –û—Å—Ç–∞–ª–æ—Å—å HP: {new_player_hp}"
            )

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    executor.start_polling(
        dp,
        skip_updates=True,
        on_startup=lambda _: logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"),
        timeout=300
                    )
